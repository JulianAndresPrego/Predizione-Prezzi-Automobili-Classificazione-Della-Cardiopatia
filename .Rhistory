library(ggplot2)
library(dplyr)
#Carga dei dati
malattia_cardiaca <- read_csv("C:/Users/Juli/Desktop/Progetto/data/heart.csv")
colnames(malattia_cardiaca) <- c("Età", "Sesso", "TipoDoloreToracico", "PressioneSanguignaRiposo",
"Colesterolo", "GlicemiaBasale", "ECGRiposo",
"FrequenzaCardiacaMassima", "AnginaEsercizio", "DepressioneST",
"PendenzaST", "MalattiaCardiaca")
#Re-codificare i fattori
malattia_cardiaca$MalattiaCardiaca <- factor(malattia_cardiaca$MalattiaCardiaca, levels = c(0, 1), labels = c('No', 'Si'))
malattia_cardiaca$Sesso <- factor(malattia_cardiaca$Sesso, levels = c('F', 'M'), labels = c('Femmina', 'Maschio'))
df <- malattia_cardiaca %>% group_by(MalattiaCardiaca, TipoDoloreToracico, Sesso) %>% count()
p_tipo_dolore <-
ggplot(df, aes(y = n, x=TipoDoloreToracico, fill=MalattiaCardiaca)) + facet_grid(.~Sesso)+
geom_bar(stat = 'identity') +
xlab('Tipo di Dolore al Petto') + ylab('Conteggio')+
scale_fill_manual(values=c("#3399ff", "#cc0099"),
name = "Malattia cardiaca")+
theme_classic() +
theme(strip.background = element_blank(), strip.text = element_text(size = 12))
p-tipo_dolore
p_tipo_dolore
p<-
ggplot(malattia_cardiaca, aes(x=Età, fill = MalattiaCardiaca))+ facet_grid(.~Sesso)+
geom_bar() +
xlab('Età') + ylab('Conteggio')+
scale_fill_manual(values=c("#3399ff", "#cc0099"),
name = "Malattia cardiaca")+
theme_classic() +
theme(line = element_line(size = 0.5), strip.background = element_blank(), strip.text = element_text(size = 12),
legend.title = element_text(size=8), legend.text = element_text(size = 6)) +
guides(color = guide_legend(override.aes = list(size = 0.2)))
p
ggsave('C:/Users/Juli/Desktop/Progetto/Figures/Età_heart_Sesso.pdf', p, width = 8, height = 4)
p_tipo_dolore
df <- malattia_cardiaca %>% group_by(MalattiaCardiaca, AnginaEsercizio, Sesso) %>% count()
ex_ang_plot <-
ggplot(df, aes(y = n, x=AnginaEsercizio, fill=MalattiaCardiaca)) + facet_grid(.~Sesso)+
geom_bar(stat = 'identity') +
xlab('Esercizio Angina') + ylab('Conteggio')+
scale_fill_manual(values=c("#3399ff", "#cc0099"),
name = "Malattia Cardiaca")+
theme_classic() +
theme(strip.background = element_blank(), strip.text = element_text(size = 12))
ex_ang_plot
knitr::opts_chunk$set(echo = TRUE)
malattia_cardiaca<-read.csv('C:/Users/Juli/Desktop/Progetto/data/heart.csv')
colnames(malattia_cardiaca)
colnames(malattia_cardiaca) <- c("Età", "Sesso", "TipoDoloreToracico", "PressioneSanguignaRiposo",
"Colesterolo", "GlicemiaBasale", "ECGRiposo",
"FrequenzaCardiacaMassima", "AnginaEsercizio", "DepressioneST",
"PendenzaST", "MalattiaCardiaca")
malattia_cardiaca$MalattiaCardiaca <- as.factor(malattia_cardiaca$MalattiaCardiaca)
malattia_cardiaca$TipoDoloreToracico <- as.factor(malattia_cardiaca$TipoDoloreToracico)
malattia_cardiaca$AnginaEsercizio <- as.factor(malattia_cardiaca$AnginaEsercizio)
malattia_cardiaca$PendenzaST <- as.factor(malattia_cardiaca$PendenzaST)
malattia_cardiaca$Sesso <- as.factor(malattia_cardiaca$Sesso)
summary(malattia_cardiaca)
head(malattia_cardiaca)
library(ggplot2)
ggplot(data = malattia_cardiaca,  aes(x = Età,  y = PressioneSanguignaRiposo, color =
Sesso)) +
geom_point()
head(malattia_cardiaca)
malattia_logit <- glm(MalattiaCardiaca ~ ., data = malattia_cardiaca, family = binomial)
summary(malattia_logit)
malattia_logit_ridotto = step(malattia_logit)
summary(malattia_logit_ridotto)
LLR = 2 * (logLik(malattia_logit) - logLik(malattia_logit_ridotto))
cat(logLik(malattia_logit), logLik(malattia_logit_ridotto))
df = malattia_logit_ridotto$df.residual - malattia_logit$df.residual
p_value = 1 - pchisq(LLR, df)
print(df)
cat('La statistica del test del rapporto di verosimiglianza è', LLR, 'e il p-value è ', p_value, 'con df', df)
malattia_logit_tutto_quadrato = glm(MalattiaCardiaca ~.  + I(FrequenzaCardiacaMassima^2) + I(Età^2) + I(DepressioneST^2) + I(PressioneSanguignaRiposo^2) + I(Colesterolo^2), family = binomial, data = malattia_cardiaca)
summary(malattia_logit_tutto_quadrato)
malattia_logit_quadrato_ridotto = step(malattia_logit_tutto_quadrato)
summary(malattia_logit_quadrato_ridotto)
LLR = 2 * (logLik(malattia_logit_tutto_quadrato) - logLik(malattia_logit_quadrato_ridotto))
df = malattia_logit_quadrato_ridotto$df.residual - malattia_logit_tutto_quadrato$df.residual
p_value = 1 - pchisq(LLR, df)
print(logLik(malattia_logit_tutto_quadrato))
print(logLik(malattia_logit_quadrato_ridotto))
cat('La statistica del test del rapporto di verosimiglianza è', LLR, 'e il p-value è ', p_value)
malattia_logit_tutte_interazioni = glm(MalattiaCardiaca ~. +(FrequenzaCardiacaMassima + Età + DepressioneST + PressioneSanguignaRiposo)^2 + I(FrequenzaCardiacaMassima^2) + I(Età^2) + I(DepressioneST^2) + I(PressioneSanguignaRiposo^2), family = binomial, data = malattia_cardiaca)
summary(malattia_logit_tutte_interazioni)
malattia_logit_interazioni_ridotto = step(malattia_logit_tutte_interazioni, direction = "both")
summary(malattia_logit_interazioni_ridotto)
malattia_logit_interazioni_ridotto = glm(formula = MalattiaCardiaca ~ Età + Sesso + TipoDoloreToracico + Colesterolo +
GlicemiaBasale + FrequenzaCardiacaMassima + AnginaEsercizio + DepressioneST + PendenzaST +
I(DepressioneST^2) + FrequenzaCardiacaMassima:DepressioneST, family = binomial, data = malattia_cardiaca)
summary(malattia_logit_interazioni_ridotto)
malattia_logit_interazioni_ridotto = glm(formula = MalattiaCardiaca ~ Età + Sesso + TipoDoloreToracico + Colesterolo +
GlicemiaBasale + FrequenzaCardiacaMassima + AnginaEsercizio + DepressioneST + PendenzaST +
I(DepressioneST^2) + FrequenzaCardiacaMassima:DepressioneST, family = binomial, data = malattia_cardiaca)
summary(malattia_logit_interazioni_ridotto)
LLR = 2 * (logLik(malattia_logit_tutte_interazioni) - logLik(malattia_logit_interazioni_ridotto))
df = malattia_logit_interazioni_ridotto$df.residual - malattia_logit_tutte_interazioni$df.residual
p_value = 1 - pchisq(LLR, df)
print(logLik(malattia_logit_tutte_interazioni))
print(logLik(malattia_logit_interazioni_ridotto))
print(df)
cat('La statistica del test del rapporto di verosimiglianza è', LLR, 'e il p-value è ', p_value)
# Modello null per il calcolo del pseudo R-quadro
null_model = glm(MalattiaCardiaca ~ 1, data = malattia_cardiaca, family = binomial)
# Pseudo R-quadro per malattia_logit_quadrato_ridotto
Pse_R2 = (deviance(null_model) - deviance(malattia_logit_quadrato_ridotto)) / deviance(null_model)
cat('Pseudo-R quadro:', Pse_R2, '\n')
null_model = glm(MalattiaCardiaca ~ 1, data = malattia_cardiaca, family = binomial)
# Pseudo R-quadro per malattia_logit_interazioni_ridotto
Pse_R2 = (deviance(null_model) - deviance(malattia_logit_interazioni_ridotto)) / deviance(null_model)
cat('Pseudo-R quadro:', Pse_R2, '\n')
null_model = glm(MalattiaCardiaca~ 1, data = malattia_cardiaca, family = binomial)
# Pseudo R-quadro per malattia_logit_ridotto
Pse_R2 = (deviance(null_model) - deviance(malattia_logit_ridotto)) / deviance(null_model)
cat('Pseudo-R quadro:', Pse_R2, '\n')
# Curve ROC per i tre modelli
library(pROC)
invisible(plot(roc(malattia_cardiaca$MalattiaCardiaca,
fitted(malattia_logit_ridotto)),
col = "#5da492",
main = "Curve ROC: 3 modelli",
legend = 'Modello logistico di covariate pure'))
invisible(plot(roc(malattia_cardiaca$MalattiaCardiaca,
fitted(malattia_logit_quadrato_ridotto)),
print.auc = TRUE,
col = "#206376",
add = TRUE))
invisible(plot(roc(malattia_cardiaca$MalattiaCardiaca,
fitted(malattia_logit_interazioni_ridotto)),
col = "#bee7a3",
add = TRUE))
color = c("#5da492","#206376","#bee7a3")
# Plot delle ROC con ggplot2
library(reshape2)
library(plotROC)
ROC = data.frame(h = malattia_cardiaca$MalattiaCardiaca,
model1 = fitted(malattia_logit_ridotto),
model2 = fitted(malattia_logit_quadrato_ridotto),
model3 = fitted(malattia_logit_interazioni_ridotto))
ROC$h = as.numeric(as.character(ROC$h))
longtest <- melt_roc(ROC, "h", c("model3", "model2", "model1"))
p <-ggplot(longtest, aes(d = D, m = M, color = name), main = "Curva ROC per 3 modelli",
xlab = "False Positive Rate (1-Specificity)", ylab = "True Positive Rate (Sensitivity)") +
geom_roc() +
style_roc() +
ggtitle('Plot ROC per tre modelli')
p
ggsave('C:/Users/Juli/Desktop/Progetto/Figures/roc_plot.png', p, width = 8, height = 5)
s = summary(malattia_logit_quadrato_ridotto)
dev = deviance(malattia_logit_quadrato_ridotto)
p_value = 1-pchisq(dev, s$df.residual)
cat('La devianza del modello è:', dev, 'con gradi di libertà di', s$df.residual, '\n')
cat('p_value è:', p_value, '\n')
s = summary(malattia_logit_interazioni_ridotto)
dev = deviance(s)
p_value = 1-pchisq(dev, s$df.residual)
cat('La devianza del modello è:', dev, 'con gradi di libertà di', s$df.residual, '\n')
cat('p_value è:', p_value, '\n')
# Plot delle ROC con ggplot2
library(reshape2)
library(plotROC)
ROC = data.frame(h = malattia_cardiaca$MalattiaCardiaca,
model1 = fitted(malattia_logit_ridotto),
model2 = fitted(malattia_logit_quadrato_ridotto),
model3 = fitted(malattia_logit_interazioni_ridotto))
ROC$h = as.numeric(as.character(ROC$h))
longtest <- melt_roc(ROC, "h", c("model3", "model2", "model1"))
p <-ggplot(longtest, aes(d = D, m = M, color = name), main = "Curva ROC per 3 modelli",
xlab = "False Positive Rate (1-Specificity)", ylab = "True Positive Rate (Sensitivity)") +
geom_roc() +
style_roc() +
ggtitle('Plot ROC per tre modelli')
p
ggsave('C:/Users/Juli/Desktop/Progetto/Figures/roc_plot.png', p, width = 8, height = 5)
# Curve ROC per i tre modelli
library(pROC)
invisible(plot(roc(malattia_cardiaca$MalattiaCardiaca,
fitted(malattia_logit_ridotto)),
col = "#5da492",
main = "Curve ROC: 3 modelli",
legend = 'Modello logistico di covariate pure'))
invisible(plot(roc(malattia_cardiaca$MalattiaCardiaca,
fitted(malattia_logit_quadrato_ridotto)),
print.auc = TRUE,
col = "#206376",
add = TRUE))
invisible(plot(roc(malattia_cardiaca$MalattiaCardiaca,
fitted(malattia_logit_interazioni_ridotto)),
col = "#bee7a3",
add = TRUE))
color = c("#5da492","#206376","#bee7a3")
# Plot delle ROC con ggplot2
library(reshape2)
library(plotROC)
ROC = data.frame(h = malattia_cardiaca$MalattiaCardiaca,
model1 = fitted(malattia_logit_ridotto),
model2 = fitted(malattia_logit_quadrato_ridotto),
model3 = fitted(malattia_logit_interazioni_ridotto))
ROC$h = as.numeric(as.character(ROC$h))
longtest <- melt_roc(ROC, "h", c("model3", "model2", "model1"))
p <-ggplot(longtest, aes(d = D, m = M, color = name), main = "Curva ROC per 3 modelli",
xlab = "False Positive Rate (1-Specificity)", ylab = "True Positive Rate (Sensitivity)") +
geom_roc() +
style_roc() +
ggtitle('Plot ROC per tre modelli')
p
ggsave('C:/Users/Juli/Desktop/Progetto/Figures/roc_plot.png', p, width = 8, height = 5)
# Curve ROC per i tre modelli
library(pROC)
invisible(plot(roc(malattia_cardiaca$MalattiaCardiaca,
fitted(malattia_logit_ridotto)),
print.auc = TRUE,
col = "#5da492",
main = "Curve ROC: 3 modelli",
legend = 'Modello logistico di covariate pure'))
invisible(plot(roc(malattia_cardiaca$MalattiaCardiaca,
fitted(malattia_logit_quadrato_ridotto)),
print.auc = TRUE,
col = "#206376",
add = TRUE))
invisible(plot(roc(malattia_cardiaca$MalattiaCardiaca,
fitted(malattia_logit_interazioni_ridotto)),
print.auc = TRUE,
col = "#bee7a3",
add = TRUE))
color = c("#5da492","#206376","#bee7a3")
# Curve ROC per i tre modelli
library(pROC)
invisible(plot(roc(malattia_cardiaca$MalattiaCardiaca,
fitted(malattia_logit_ridotto)),
print.auc = FALSE,
col = "#5da492",
main = "Curve ROC: 3 modelli",
legend = 'Modello logistico di covariate pure'))
invisible(plot(roc(malattia_cardiaca$MalattiaCardiaca,
fitted(malattia_logit_quadrato_ridotto)),
print.auc = TRUE,
col = "#206376",
add = TRUE))
invisible(plot(roc(malattia_cardiaca$MalattiaCardiaca,
fitted(malattia_logit_interazioni_ridotto)),
print.auc = FALSE,
col = "#bee7a3",
add = TRUE))
color = c("#5da492","#206376","#bee7a3")
# Curve ROC per i tre modelli
library(pROC)
invisible(plot(roc(malattia_cardiaca$MalattiaCardiaca,
fitted(malattia_logit_ridotto)),
print.auc = TRUE,
col = "#5da492",
main = "Curve ROC: 3 modelli",
legend = 'Modello logistico di covariate pure'))
invisible(plot(roc(malattia_cardiaca$MalattiaCardiaca,
fitted(malattia_logit_quadrato_ridotto)),
print.auc = FALSE,
col = "#206376",
add = TRUE))
invisible(plot(roc(malattia_cardiaca$MalattiaCardiaca,
fitted(malattia_logit_interazioni_ridotto)),
print.auc = FALSE,
col = "#bee7a3",
add = TRUE))
color = c("#5da492","#206376","#bee7a3")
stepAIC(malattia_logit_interazioni_ridotto)
AIC(malattia_logit_interazioni_ridotto)
AIC(malattia_logit_quadrato_ridotto)
AIC(malattia_logit_ridotto)
# Coefficienti e intervalli di confidenza del modello malattia_logit_quadrato_ridotto
malattia_logit_quadrato_ridotto$coefficients
confint.default(malattia_logit_quadrato_ridotto)
library(readr)
car_dat <- read_csv("C:/Users/Juli/Desktop/Progetto/data/CarPrice_Assignment.csv")
test_string<-toString(car_dat$CarName[1])
strsplit(test_string,"-")
test_string2<-toString(car_dat$CarName[4])
test_vec<-c(strsplit(test_string2," "))
test_car_comp<-c(rep(NA,nrow(car_dat)))
test_car_list<-vector(mode = "list", length = nrow(car_dat))
for(i in 1:nrow(car_dat)){
test_string<-toString(car_dat$CarName[i])
test_car_list[[i]]<-c(strsplit(test_string," "))
test_car_pre<-unlist(test_car_list[[i]][1])
test_car_comp[i]<-test_car_pre[1]
}
# Crea un nuovo vettore per i nomi delle compagnie corrette.
car_comp_final<-c(rep(NA,nrow(car_dat)))
# Ciclo for per correggere i nomi delle compagnie con errori di battitura.
for(i in 1:nrow(car_dat)){
if(test_car_comp[i]=="maxda"){
car_comp_final[i]<-"mazda"
}
else if(test_car_comp[i]=="Nissan"){
car_comp_final[i]<-"nissan"
}
else if(test_car_comp[i]=="porcshce"){
car_comp_final[i]<-"toyota"
}
else if(test_car_comp[i]=="vokswagen"){
car_comp_final[i]<-"volkswagen"
}
else if(test_car_comp[i]=="vw"){
car_comp_final[i]<-"volkswagen"
}
else if(test_car_comp[i]=="toyouta"){
car_comp_final[i]<-"toyota"
}
else{
car_comp_final[i]<-test_car_comp[i]
}
}
# Funzione per mettere la prima lettera in maiuscolo.
firstup <- function(x) {
substr(x, 1, 1) <- toupper(substr(x, 1, 1))
x
}
# Applica la funzione firstup a car_comp_final per mettere in maiuscolo la prima lettera di ogni nome di compagnia.
car_comp_final<-firstup(car_comp_final)
# Aggiunge la colonna car_company al dataset car_dat con i nomi delle compagnie corretti.
car_dat$car_company<-car_comp_final
# Crea un istogramma del prezzo delle macchine.
hist(car_dat$price)
# possiamo usare la regressione esponenziale o il modello log-lineare
# rimuovi car id e car name poiché non sono utili nell'analisi
# car name si sovrappone alle variabili car company
car_dat2<-car_dat[,-c(1,3)]
#estrai variabili di tipo carattere
character_var<-car_dat2[, sapply(car_dat2, class) == 'character']
character_var[sapply(character_var, is.character)] <- lapply(character_var[sapply(character_var, is.character)],
as.factor)
#estrai variabili non di tipo carattere
no_chara<-car_dat2[, sapply(car_dat2, class) != 'character']
#summary(no_chara)
car_dat3<-cbind(character_var,no_chara)
# modello gamma con tutte le variabili esplicative
gamma_model_price1<-glm(price~., data= car_dat3[, -c(7,9)],family= Gamma(link = "log"))
sum_mod_gamma<-summary(gamma_model_price1)
# utilizzo di stepAIC per effettuare la selezione stepwise
library(MASS)
gamma_step_model <- stepAIC(gamma_model_price1, direction = "both",
trace = TRUE)
gamma_step_sum<-summary(gamma_step_model)
# gamma_squareb<-glm(formula = price ~ aspiration + carbody + enginelocation +
# cylindernumber + car_company + wheelbase + carlength + carwidth +
# carheight + curbweight + enginesize + boreratio + peakrpm +
# citympg + highwaympg, family = Gamma(link = "log"), data = car_dat3[,-c(7, 9)])
gamma_square<-glm(formula = price ~ fueltype + aspiration + doornumber + carbody + drivewheel + enginelocation +
cylindernumber + car_company + symboling + wheelbase + carlength + carwidth +
carheight + curbweight + enginesize + boreratio + stroke + compressionratio + horsepower + peakrpm +
citympg + highwaympg+ I(wheelbase^2)+I(carlength^2)+
I(carwidth^2)+I(carheight^2)+I(curbweight^2)+I(enginesize^2)+
I(boreratio^2)+I(peakrpm^2)+I(citympg^2)+I(highwaympg^2)
, family = Gamma(link = "log"), data = car_dat3[,-c(7, 9)])
# Selezione stepwise per il modello quadratico.
gamma_square_step<-stepAIC(gamma_square,direction = "both",trace=FALSE)
# lrttest per modello completo vs modello stepwise (effetto principale)
loglik_full<-logLik(gamma_model_price1)
loglik_step<-logLik(gamma_step_model)
test_stat1<-loglik_full-loglik_step
p_val1<-1-pchisq(test_stat1,8)
# Il nostro modello è uguale al modello completo (effetto principale)
# lrttest per modello quadratico completo vs modello stepwise quadratico
loglik_sq_full<-logLik(gamma_square)
loglik_sq_step<-logLik(gamma_square_step)
test_stat2<-loglik_sq_full-loglik_sq_step
pval2<-1-pchisq(test_stat2,22)
# Il nostro modello è uguale al modello completo (modello quadratico)
# Confronto tra modello ad effetto principale e modello quadratico
AIC(gamma_step_model)
AIC(gamma_square_step)
# Il modello quadratico ha l'AIC inferiore rispetto al modello ad effetto principale. Pertanto, il modello quadratico è il migliore.
# adeguatezza del modello
deviance(gamma_step_model)
deviance(gamma_square_step)
pchisq(deviance(gamma_square_step),df.residual(gamma_square_step),lower.tail = FALSE)
pchisq(deviance(gamma_step_model),df.residual(gamma_step_model),lower.tail = FALSE)
deviance(gamma_step_model)-deviance(deviance(gamma_step_model))
deviance(gamma_step_model)-deviance(gamma_step_model))
deviance(gamma_step_model)-deviance(gamma_step_model)
deviance(gamma_step_model)-deviance(gamma_model_price1)
pseudo_R2_step<-1-(summary(gamma_step_model)$deviance/summary(gamma_step_model)$null.deviance)
pseudo_R2_step
AIC(gamma_step_model)
##### Malattie cardiache ######
#Carga dei dati
malattia_cardiaca <- read_csv("C:/Users/Juli/Desktop/Progetto/data/heart.csv")
colnames(malattia_cardiaca) <- c("Età", "Sesso", "TipoDoloreToracico", "PressioneSanguignaRiposo",
"Colesterolo", "GlicemiaBasale", "ECGRiposo",
"FrequenzaCardiacaMassima", "AnginaEsercizio", "DepressioneST",
"PendenzaST", "MalattiaCardiaca")
#Re-codificare i fattori
malattia_cardiaca$MalattiaCardiaca <- factor(malattia_cardiaca$MalattiaCardiaca, levels = c(0, 1), labels = c('No', 'Si'))
malattia_cardiaca$Sesso <- factor(malattia_cardiaca$Sesso, levels = c('F', 'M'), labels = c('Femmina', 'Maschio'))
# Grafico del tipo di dolore toracico per sesso
df <- malattia_cardiaca %>% group_by(MalattiaCardiaca, TipoDoloreToracico, Sesso) %>% count()
p_tipo_dolore <-
ggplot(df, aes(y = n, x=TipoDoloreToracico, fill=MalattiaCardiaca)) + facet_grid(.~Sesso)+
geom_bar(stat = 'identity') +
xlab('Tipo di Dolore al Petto') + ylab('Conteggio')+
scale_fill_manual(values=c("#3399ff", "#cc0099"),
name = "Malattia cardiaca")+
theme_classic() +
theme(strip.background = element_blank(), strip.text = element_text(size = 12))
p<-
ggplot(malattia_cardiaca, aes(x=Età, fill = MalattiaCardiaca))+ facet_grid(.~Sesso)+
geom_bar() +
xlab('Età') + ylab('Conteggio')+
scale_fill_manual(values=c("#3399ff", "#cc0099"),
name = "Malattia cardiaca")+
theme_classic() +
theme(line = element_line(size = 0.5), strip.background = element_blank(), strip.text = element_text(size = 12),
legend.title = element_text(size=8), legend.text = element_text(size = 6)) +
guides(color = guide_legend(override.aes = list(size = 0.2)))
p
ggsave('C:/Users/Juli/Desktop/Progetto/Figures/Età_heart_Sesso.pdf', p, width = 8, height = 4)
View(p_tipo_dolore)
p_tipo_dolore
ex_ang_plot
df <- malattia_cardiaca %>% group_by(MalattiaCardiaca, AnginaEsercizio, Sesso) %>% count()
ex_ang_plot <-
ggplot(df, aes(y = n, x=AnginaEsercizio, fill=MalattiaCardiaca)) + facet_grid(.~Sesso)+
geom_bar(stat = 'identity') +
xlab('Esercizio Angina') + ylab('Conteggio')+
scale_fill_manual(values=c("#3399ff", "#cc0099"),
name = "Malattia Cardiaca")+
theme_classic() +
theme(strip.background = element_blank(), strip.text = element_text(size = 12))
ex_ang_plot
##
p <-
ggplot(malattia_cardiaca, aes(y = DepressioneST, x=MalattiaCardiaca))+
geom_boxplot(colour = "#cc0099") +
xlab('Malattia Cardiaca') + ylab('DepressioneST')+
theme_classic() +
theme(strip.background = element_blank(), strip.text = element_text(size = 12))
p
ggsave('C:/Users/Juli/Desktop/Progetto/Figures/Depressione.pdf', p, width = 5, height = 5)
library(readr)
library(ggplot2)
library(dplyr)
##### Prezzo dell'auto ######
car_dat <- read_csv("C:/Users/Juli/Desktop/Progetto/data/CarPrice_Assignment.csv")
test_string<-toString(car_dat$CarName[1])
strsplit(test_string,"-")
test_string2<-toString(car_dat$CarName[4])
test_vec<-c(strsplit(test_string2," "))
test_car_comp<-c(rep(NA,nrow(car_dat)))
test_car_list<-vector(mode = "list", length = nrow(car_dat))
for(i in 1:nrow(car_dat)){
test_string<-toString(car_dat$CarName[i])
test_car_list[[i]]<-c(strsplit(test_string," "))
test_car_pre<-unlist(test_car_list[[i]][1])
test_car_comp[i]<-test_car_pre[1]
}
# correggi i typo
car_comp_final<-c(rep(NA,nrow(car_dat)))
for(i in 1:nrow(car_dat)){
if(test_car_comp[i]=="maxda"){
car_comp_final[i]<-"mazda"
}
else if(test_car_comp[i]=="Nissan"){
car_comp_final[i]<-"nissan"
}
else if(test_car_comp[i]=="porcshce"){
car_comp_final[i]<-"toyota"
}
else if(test_car_comp[i]=="vokswEtàn"){
car_comp_final[i]<-"volkswEtàn"
}
else if(test_car_comp[i]=="vw"){
car_comp_final[i]<-"volkswEtàn"
}
else if(test_car_comp[i]=="toyouta"){
car_comp_final[i]<-"toyota"
}
else{
car_comp_final[i]<-test_car_comp[i]
}
}
firstup <- function(x) {
substr(x, 1, 1) <- toupper(substr(x, 1, 1))
x
}
car_comp_final<-firstup(car_comp_final)
car_dat$car_company<-car_comp_final
hist(car_dat$price)
# possiamo utilizzare la regressione esponenziale o il modello log-lineare
# rimuovi l'ID dell'auto e il nome dell'auto poiché non sono utili nell'analisi
# il nome dell'auto si sovrappone alle variabili della casa automobilistica
car_dat2<-car_dat[,-c(1,3)]
# estrai le variabili di tipo carattere
character_var<-car_dat2[, sapply(car_dat2, class) == 'character']
character_var[sapply(character_var, is.character)] <- lapply(character_var[sapply(character_var, is.character)],
as.factor)
# estrai le variabili non di tipo carattere
no_chara<-car_dat2[, sapply(car_dat2, class) != 'character']
#summary(no_chara)
car_dat3<-cbind(character_var,no_chara)
# modello esponenziale
expo_model_price<-glm(price~., data= car_dat3[, -c(6,7,9)],family= Gamma(link = "log"))
(sum_mod_expo<-summary(expo_model_price,dispersion=1))
p <-
ggplot(car_dat3) +
aes(x = enginesize, y = price, color = cylindernumber) +
geom_point(color = "black") +
geom_smooth(method = "lm", alpha = 0.2) +
xlab('Dimensione del motore') + ylab('Prezzo')+
scale_colour_brewer(palette = "Set1", name = "Numero di cilindri")+
theme_classic()
ggsave('C:/Users/Juli/Desktop/Progetto/Figures/dimensione_motore.pdf', p, width = 8, height = 5)
p
